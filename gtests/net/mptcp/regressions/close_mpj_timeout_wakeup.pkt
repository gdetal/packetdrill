// connection initiated by packetdrill
--tolerance_usecs=100000
`../common/defaults.sh
sysctl -q net.mptcp.close_timeout=1`

+0     `../common/multi-ep.sh -e 1 -m signal`

+0     socket(..., SOCK_STREAM, IPPROTO_MPTCP) = 3
+0     setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0

+0     bind(3, ..., ...) = 0
+0     listen(3, 1) = 0
+0.0     <  addr[caddr0] > addr[saddr0]  S   0:0(0)                     win 65535  <mss 1460, nop, wscale 7,  mpcapable v1 flags[flag_h] nokey>
+0.0     >                               S.  0:0(0)           ack 1                <mss 1460, nop, wscale 8,  mpcapable v1 flags[flag_h] key[skey]>
+0.0     <                                .  1:1(0)           ack 1     win 256                              <mpcapable v1 flags[flag_h] key[ckey=2, skey]>
+0     accept(3, ..., ...) = 4

// the 4th ack, making the mptcp socket fully established, will trigger the add_addr
+0.0     <                                .  1:1(0)           ack 1     win 256                                         <dss dack4=1 nocs>
+0.0     >                                .  1:1(0)           ack 1                <add_address address_id=1 addr[saddr1] hmac=auto>
+0.0     <                                .  1:1(0)           ack 1     win 256    <add_address address_id=1 addr[saddr1] addr_echo,  dss dack4=1 nocs>


// create subflow
+0.0    <  addr[caddr1] > addr[saddr0]   S   0:0(0)                     win 65535  <mss 1460, sackOK, TS val 448955294  ecr 0,          nop, wscale 8, mp_join_syn     backup=1 address_id=1 token=sha256_32(skey)>
+0.0    >                                S.  0:0(0)           ack 1                <mss 1460, sackOK, TS val 448955294  ecr 448955294,  nop, wscale 8, mp_join_syn_ack backup=1 address_id=1 sender_hmac=auto>
+0.0    <                                 .  1:1(0)           ack 1     win 256    <nop, nop,         TS val 448955294  ecr 448955294,                 mp_join_ack                           sender_hmac=auto>

// reset both subflows
+0.0    <  addr[caddr0] > addr[saddr0]   R  1:1(0)            ack 1     win 0
+0.0    <  addr[caddr1] > addr[saddr0]   R  1:1(0)            ack 1     win 0


// close timeout must wake this up
+0...1  read(4, ..., 1000) = -1 ENOTCONN (Socket is not connected)

// the following is needed to avoid the pktdrill completing while the above syscall
// is still running
+1.1    read(4, ..., 1000) = -1 ENOTCONN (Socket is not connected)

