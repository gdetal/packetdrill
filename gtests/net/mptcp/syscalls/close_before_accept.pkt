--tolerance_usecs=350000
`../common/defaults.sh`

+0    `../common/server.sh`

+0.0  socket(..., SOCK_STREAM, IPPROTO_MPTCP) = 3
+0.0  setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0.0  fcntl(3, F_GETFL) = 0x2 (flags O_RDWR)
+0.0  fcntl(3, F_SETFL, O_RDWR|O_NONBLOCK) = 0

+0    bind(3, ..., ...) = 0
+0    listen(3, 1) = 0

+0.0    <  S   0:0(0)         win 65535  <mss 1460, sackOK, TS val 700 ecr 0,   nop, wscale 8, mpcapable v1 flags[flag_h] nokey>
+0.0    >  S.  0:0(0)  ack 1             <mss 1460, sackOK, TS val 100 ecr 700, nop, wscale 8, mpcapable v1 flags[flag_h] key[skey]>
+0.0    <   .  1:1(0)  ack 1  win 256    <nop, nop,         TS val 700 ecr 100,                mpcapable v1 flags[flag_h] key[ckey=2, skey]>
+0.0    >   .  1:1(0)  ack 1             <nop, nop,         TS val 100 ecr 700,                add_address address_id=1 addr[saddr0] hmac=auto>

+0.2    <  P.  1:3(2)  ack 1  win 256    <nop, nop,         TS val 700 ecr 100,                mpcapable v1 flags[flag_h] key[skey, ckey] mpcdatalen 2, nop, nop>

// MP_CAPABLE carrying data are acked with 64-bit, safer not knowing if the
// sender will use a DSN on 64-bit or 32-bit. Later we can use the lower 32 bits
+0.0    >   .  1:1(0)  ack 3             <nop, nop,         TS val 100 ecr 700,                dss dack8=3 dll=0 nocs>

// incoming reset will destory the first subflow and msk
+0.2    <  R.  3:3(0)  ack 2  win 450    <nop, nop,         TS val 700 ecr 100,                dss dack4=2 nocs>

// msk still exists and is established
+0    poll([{fd=3, events=POLLIN, revents=POLLIN}], 1, 0) = 1
+0    accept(3, ..., ...) = 4

// the msk is closed if the first subflow is closed before accept().
+0    write(4, ..., 100) = -1 (Broken pipe)
